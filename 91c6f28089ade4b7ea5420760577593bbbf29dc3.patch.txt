From 91c6f28089ade4b7ea5420760577593bbbf29dc3 Mon Sep 17 00:00:00 2001
From: TheLimeGlass <seantgrover@gmail.com>
Date: Thu, 31 Aug 2023 15:04:40 -0600
Subject: [PATCH] Start working on Folia support

---
 build.gradle                                  |  3 +-
 .../skript/test/platform/Environment.java     | 64 ++++++++++++++++++-
 src/main/java/ch/njol/skript/util/Task.java   | 43 +++++++------
 src/main/resources/plugin.yml                 |  1 +
 .../skript/environments/java17/folia.json     | 17 +++++
 5 files changed, 105 insertions(+), 23 deletions(-)
 create mode 100644 src/test/skript/environments/java17/folia.json

diff --git a/build.gradle b/build.gradle
index 5920cb95ac8..3bd76b7b424 100644
--- a/build.gradle
+++ b/build.gradle
@@ -29,7 +29,7 @@ dependencies {
 	shadow group: 'org.bstats', name: 'bstats-bukkit', version: '3.0.2'
 	shadow group: 'net.kyori', name: 'adventure-text-serializer-bungeecord', version: '4.3.0'
 
-	implementation group: 'io.papermc.paper', name: 'paper-api', version: '1.20.1-R0.1-SNAPSHOT'
+	implementation group: 'dev.folia', name: 'folia-api', version: '1.20.1-R0.1-SNAPSHOT'
 	implementation group: 'org.eclipse.jdt', name: 'org.eclipse.jdt.annotation', version: '2.2.700'
 	implementation group: 'com.google.code.findbugs', name: 'findbugs', version: '3.0.1'
 	implementation group: 'com.sk89q.worldguard', name: 'worldguard-legacy', version: '7.0.0-SNAPSHOT'
@@ -273,6 +273,7 @@ compileTestJava.options.encoding = 'UTF-8'
 String environments = 'src/test/skript/environments/';
 String env = project.property('testEnv') == null ? latestEnv : project.property('testEnv') + '.json'
 int envJava = project.property('testEnvJavaVersion') == null ? latestJava : Integer.parseInt(project.property('testEnvJavaVersion') as String)
+createTestTask('foliaTest', 'Runs tests on one environment being the latest supported Java and Minecraft on Folia.', environments + 'java17/folia.json', latestJava)
 createTestTask('quickTest', 'Runs tests on one environment being the latest supported Java and Minecraft.', environments + latestEnv, latestJava)
 createTestTask('skriptTestJava17', 'Runs tests on all Java 17 environments.', environments + 'java17', latestJava)
 createTestTask('skriptTestJava8', 'Runs tests on all Java 8 environments.', environments + 'java8', oldestJava)
diff --git a/src/main/java/ch/njol/skript/test/platform/Environment.java b/src/main/java/ch/njol/skript/test/platform/Environment.java
index 6866db6e0c0..b9da008e2eb 100644
--- a/src/main/java/ch/njol/skript/test/platform/Environment.java
+++ b/src/main/java/ch/njol/skript/test/platform/Environment.java
@@ -146,6 +146,59 @@ private void generateSource() throws IOException {
 		}
 	}
 
+	public static class FoliaResource extends Resource {
+
+		private final String version;
+		@Nullable
+		private transient String source;
+
+		public FoliaResource(String version, String target) {
+			super(null, target);
+			this.version = version;
+		}
+
+		@Override
+		public String getSource() {
+			try {
+				generateSource();
+			} catch (Exception e) {
+				throw new RuntimeException(e);
+			}
+			if (source == null)
+				throw new IllegalStateException();
+			return source;
+		}
+
+		private void generateSource() throws IOException {
+			if (source != null)
+				return;
+
+			String stringUrl = "https://api.papermc.io/v2/projects/folia/versions/" + version;
+			URL url = new URL(stringUrl);
+			JsonObject jsonObject;
+			try (InputStream is = url.openStream()) {
+				InputStreamReader reader = new InputStreamReader(is, StandardCharsets.UTF_8);
+				jsonObject = gson.fromJson(reader, JsonObject.class);
+			}
+
+			JsonArray jsonArray = jsonObject.get("builds").getAsJsonArray();
+
+			int latestBuild = -1;
+			for (JsonElement jsonElement : jsonArray) {
+				int build = jsonElement.getAsInt();
+				if (build > latestBuild) {
+					latestBuild = build;
+				}
+			}
+
+			if (latestBuild == -1)
+				throw new IllegalStateException("No builds for this version");
+
+			source = "https://api.papermc.io/v2/projects/folia/versions/" + version + "/builds/" + latestBuild
+				+ "/downloads/folia-" + version + "-" + latestBuild + ".jar";
+		}
+	}
+
 	/**
 	 * Resources that need to be copied.
 	 */
@@ -163,6 +216,12 @@ private void generateSource() throws IOException {
 	@Nullable
 	private final List<PaperResource> paperDownloads;
 
+	/**
+	 * Folia resources that need to be downloaded.
+	 */
+	@Nullable
+	private final List<FoliaResource> foliaDownloads;
+
 	/**
 	 * Where Skript should be placed under platform root.
 	 * Directories created as needed.
@@ -174,11 +233,12 @@ private void generateSource() throws IOException {
 	 */
 	private final String[] commandLine;
 
-	public Environment(String name, List<Resource> resources, @Nullable List<Resource> downloads, @Nullable List<PaperResource> paperDownloads, String skriptTarget, String... commandLine) {
+	public Environment(String name, List<Resource> resources, @Nullable List<Resource> downloads, @Nullable List<PaperResource> paperDownloads, @Nullable List<FoliaResource> foliaDownloads, String skriptTarget, String... commandLine) {
 		this.name = name;
 		this.resources = resources;
 		this.downloads = downloads;
 		this.paperDownloads = paperDownloads;
+		this.foliaDownloads = foliaDownloads;
 		this.skriptTarget = skriptTarget;
 		this.commandLine = commandLine;
 	}
@@ -218,6 +278,8 @@ public void initialize(Path dataRoot, Path runnerRoot, boolean remake) throws IO
 			downloads.addAll(this.downloads);
 		if (this.paperDownloads != null)
 			downloads.addAll(this.paperDownloads);
+		if (this.foliaDownloads != null)
+			downloads.addAll(this.foliaDownloads);
 		// Download additional resources
 		for (Resource resource : downloads) {
 			assert resource != null;
diff --git a/src/main/java/ch/njol/skript/util/Task.java b/src/main/java/ch/njol/skript/util/Task.java
index 2fcff33984f..f641dfcab5d 100644
--- a/src/main/java/ch/njol/skript/util/Task.java
+++ b/src/main/java/ch/njol/skript/util/Task.java
@@ -22,41 +22,42 @@
 import java.util.concurrent.CancellationException;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.Future;
+import java.util.concurrent.TimeUnit;
 
 import org.bukkit.Bukkit;
 import org.bukkit.plugin.Plugin;
 import org.eclipse.jdt.annotation.Nullable;
+import org.jetbrains.annotations.NotNull;
 
 import ch.njol.skript.Skript;
 import ch.njol.util.Closeable;
+import io.papermc.paper.threadedregions.scheduler.ScheduledTask;
+import io.papermc.paper.threadedregions.scheduler.ScheduledTask.ExecutionState;
 
-/**
- * @author Peter GÃ¼ttinger
- */
 public abstract class Task implements Runnable, Closeable {
 	
 	private final Plugin plugin;
 	private final boolean async;
 	private long period = -1;
 	
-	private int taskID = -1;
+	private @NotNull ScheduledTask taskID;
 	
-	public Task(final Plugin plugin, final long delay, final long period) {
+	public Task(Plugin plugin, long delay, long period) {
 		this(plugin, delay, period, false);
 	}
 	
-	public Task(final Plugin plugin, final long delay, final long period, final boolean async) {
+	public Task(Plugin plugin, long delay, long period, boolean async) {
 		this.plugin = plugin;
 		this.period = period;
 		this.async = async;
 		schedule(delay);
 	}
 	
-	public Task(final Plugin plugin, final long delay) {
+	public Task(Plugin plugin, long delay) {
 		this(plugin, delay, false);
 	}
 	
-	public Task(final Plugin plugin, final long delay, final boolean async) {
+	public Task(Plugin plugin, long delay, boolean async) {
 		this.plugin = plugin;
 		this.async = async;
 		schedule(delay);
@@ -67,43 +68,43 @@ public Task(final Plugin plugin, final long delay, final boolean async) {
 	 * 
 	 * @param delay
 	 */
-	private void schedule(final long delay) {
+	private void schedule(long delay) {
 		assert !isAlive();
 		if (!Skript.getInstance().isEnabled())
 			return;
 		
 		if (period == -1) {
 			if (async) {
-				taskID = Bukkit.getScheduler().runTaskLaterAsynchronously(plugin, this, delay).getTaskId();
+				taskID = Bukkit.getAsyncScheduler().runDelayed(plugin, task -> this.run(), (delay / 20) * 1000, TimeUnit.MILLISECONDS);
 			} else {
-				taskID = Bukkit.getScheduler().scheduleSyncDelayedTask(plugin, this, delay);
+				taskID = Bukkit.getGlobalRegionScheduler().runDelayed(plugin, task -> this.run(), delay);
 			}
 		} else {
 			if (async) {
-				taskID = Bukkit.getScheduler().runTaskTimerAsynchronously(plugin, this, delay, period).getTaskId();
+				taskID = Bukkit.getAsyncScheduler().runAtFixedRate(plugin, task -> this.run(), (delay / 20) * 1000, (period / 20) * 1000, TimeUnit.MILLISECONDS);
 			} else {
-				taskID = Bukkit.getScheduler().scheduleSyncRepeatingTask(plugin, this, delay, period);
+				taskID = Bukkit.getGlobalRegionScheduler().runAtFixedRate(plugin, task -> this.run(), delay, period);
 			}
 		}
-		assert taskID != -1;
+		assert taskID != null;
 	}
-	
+
 	/**
 	 * @return Whether this task is still running, i.e. whether it will run later or is currently running.
 	 */
 	public final boolean isAlive() {
-		if (taskID == -1)
+		if (taskID == null)
 			return false;
-		return Bukkit.getScheduler().isQueued(taskID) || Bukkit.getScheduler().isCurrentlyRunning(taskID);
+		return taskID.getExecutionState() == ExecutionState.RUNNING;
 	}
-	
+
 	/**
 	 * Cancels this task.
 	 */
 	public final void cancel() {
-		if (taskID != -1) {
-			Bukkit.getScheduler().cancelTask(taskID);
-			taskID = -1;
+		if (taskID != null) {
+			taskID.cancel();
+			taskID = null;
 		}
 	}
 	
diff --git a/src/main/resources/plugin.yml b/src/main/resources/plugin.yml
index df4d137c10f..68cf79aff83 100644
--- a/src/main/resources/plugin.yml
+++ b/src/main/resources/plugin.yml
@@ -30,6 +30,7 @@ main: ch.njol.skript.Skript
 
 version: @version@
 api-version: 1.13
+folia-supported: true
 
 commands:
     skript:
diff --git a/src/test/skript/environments/java17/folia.json b/src/test/skript/environments/java17/folia.json
new file mode 100644
index 00000000000..309d3372fd8
--- /dev/null
+++ b/src/test/skript/environments/java17/folia.json
@@ -0,0 +1,17 @@
+{
+	"name": "folia",
+	"resources": [
+		{"source": "server.properties.generic", "target": "server.properties"}
+	],
+	"foliaDownloads": [
+		{
+			"version": "1.20.1",
+			"target": "folia.jar"
+		}
+	],
+	"skriptTarget": "plugins/Skript.jar",
+	"commandLine": [
+		"-Dcom.mojang.eula.agree=true",
+		"-jar", "folia.jar", "--nogui"
+	]
+}
