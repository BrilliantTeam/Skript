From 08b754d45ac5d5fbfcc25f9c26498f923886197b Mon Sep 17 00:00:00 2001
From: TheLimeGlass <seantgrover@gmail.com>
Date: Thu, 31 Aug 2023 17:33:10 -0600
Subject: [PATCH] Experimental stage

---
 .../java/ch/njol/skript/ScriptLoader.java     |  14 +-
 src/main/java/ch/njol/skript/Skript.java      | 215 ++++++++++--------
 .../java/ch/njol/skript/SkriptCommand.java    |  23 +-
 .../skript/bukkitutil/ClickEventTracker.java  |  14 +-
 .../ch/njol/skript/command/ScriptCommand.java |   8 +-
 .../ch/njol/skript/effects/EffIgnite.java     |   5 +-
 .../ch/njol/skript/util/BlockStateBlock.java  |  28 +--
 .../njol/skript/util/DelayedChangeBlock.java  |  31 +--
 src/main/java/ch/njol/skript/util/Task.java   |  39 ----
 .../ch/njol/skript/variables/SQLStorage.java  | 148 ++++++------
 10 files changed, 266 insertions(+), 259 deletions(-)

diff --git a/src/main/java/ch/njol/skript/ScriptLoader.java b/src/main/java/ch/njol/skript/ScriptLoader.java
index 14cd0b3e628..dbdab55f3d0 100644
--- a/src/main/java/ch/njol/skript/ScriptLoader.java
+++ b/src/main/java/ch/njol/skript/ScriptLoader.java
@@ -662,15 +662,11 @@ private static NonNullPair<Script, List<Structure>> loadScript(Config config) {
 			
 			return null;
 		};
-		if (isAsync()) { // Need to delegate to main thread
-			Task.callSync(callable);
-		} else { // We are in main thread, execute immediately
-			try {
-				callable.call();
-			} catch (Exception e) {
-				//noinspection ThrowableNotThrown
-				Skript.exception(e);
-			}
+		try {
+			callable.call();
+		} catch (Exception e) {
+			//noinspection ThrowableNotThrown
+			Skript.exception(e);
 		}
 		
 		return new NonNullPair<>(script, structures);
diff --git a/src/main/java/ch/njol/skript/Skript.java b/src/main/java/ch/njol/skript/Skript.java
index 45d076b7846..0e8205e80e2 100644
--- a/src/main/java/ch/njol/skript/Skript.java
+++ b/src/main/java/ch/njol/skript/Skript.java
@@ -554,7 +554,7 @@ public void onEnable() {
 			info(" " + Language.get("skript.copyright"));
 		
 		final long tick = testing() ? Bukkit.getWorlds().get(0).getFullTime() : 0;
-		Bukkit.getScheduler().scheduleSyncDelayedTask(this, new Runnable() {
+		new Task(Skript.getInstance(), 1) {
 			@SuppressWarnings("synthetic-access")
 			@Override
 			public void run() {
@@ -652,103 +652,114 @@ protected void afterErrors() {
 				debug("Early init done");
 
 				if (TestMode.ENABLED) {
-					Bukkit.getScheduler().runTaskLater(Skript.this, () -> info("Skript testing environment enabled, starting soon..."), 1);
+					new Task(Skript.getInstance(), 1) {
+						@Override
+						public void run() {
+							info("Skript testing environment enabled, starting soon...");
+						}
+					};
 					// Ignore late init (scripts, etc.) in test mode
-					Bukkit.getScheduler().runTaskLater(Skript.this, () -> {
-						// Delay is in Minecraft ticks.
-						long shutdownDelay = 0;
-						if (TestMode.GEN_DOCS) {
-							Bukkit.dispatchCommand(Bukkit.getConsoleSender(), "skript gen-docs");
-						} else if (TestMode.DEV_MODE) { // Developer controlled environment.
-							info("Test development mode enabled. Test scripts are at " + TestMode.TEST_DIR);
-							return;
-						} else {
-							info("Loading all tests from " + TestMode.TEST_DIR);
-
-							// Treat parse errors as fatal testing failure
-							CountingLogHandler errorCounter = new CountingLogHandler(Level.SEVERE);
-							try {
-								errorCounter.start();
-								File testDir = TestMode.TEST_DIR.toFile();
-								assert testDir != null;
-								ScriptLoader.loadScripts(testDir, errorCounter);
-							} finally {
-								errorCounter.stop();
-							}
-
-							Bukkit.getPluginManager().callEvent(new SkriptTestEvent());
-							if (errorCounter.getCount() > 0) {
-								TestTracker.testStarted("parse scripts");
-								TestTracker.testFailed(errorCounter.getCount() + " error(s) found");
-							}
-							if (errored) { // Check for exceptions thrown while script was executing
-								TestTracker.testStarted("run scripts");
-								TestTracker.testFailed("exception was thrown during execution");
-							}
-							if (TestMode.JUNIT) {
-								SkriptLogger.setVerbosity(Verbosity.DEBUG);
-								info("Running all JUnit tests...");
-								long milliseconds = 0, tests = 0, fails = 0, ignored = 0, size = 0;
+					new Task(Skript.getInstance(), 100) {
+						@Override
+						public void run() {
+							// Delay is in Minecraft ticks.
+							long shutdownDelay = 0;
+							if (TestMode.GEN_DOCS) {
+								Bukkit.dispatchCommand(Bukkit.getConsoleSender(), "skript gen-docs");
+							} else if (TestMode.DEV_MODE) { // Developer controlled environment.
+								info("Test development mode enabled. Test scripts are at " + TestMode.TEST_DIR);
+								return;
+							} else {
+								info("Loading all tests from " + TestMode.TEST_DIR);
+	
+								// Treat parse errors as fatal testing failure
+								CountingLogHandler errorCounter = new CountingLogHandler(Level.SEVERE);
 								try {
-									List<Class<?>> classes = Lists.newArrayList(Utils.getClasses(Skript.getInstance(), "org.skriptlang.skript.test", "tests"));
-									// Test that requires package access. This is only present when compiling with src/test.
-									classes.add(Class.forName("ch.njol.skript.variables.FlatFileStorageTest"));
-									size = classes.size();
-									for (Class<?> clazz : classes) {
-										// Reset class SkriptJUnitTest which stores test requirements.
-										String test = clazz.getName();
-										SkriptJUnitTest.setCurrentJUnitTest(test);
-										SkriptJUnitTest.setShutdownDelay(0);
-
-										info("Running JUnit test '" + test + "'");
-										Result junit = JUnitCore.runClasses(clazz);
-										TestTracker.testStarted("JUnit: '" + test + "'");
-
-										// Collect all data from the current JUnit test.
-										shutdownDelay = Math.max(shutdownDelay, SkriptJUnitTest.getShutdownDelay());
-										tests += junit.getRunCount();
-										milliseconds += junit.getRunTime();
-										ignored += junit.getIgnoreCount();
-										fails += junit.getFailureCount();
-
-										// If JUnit failures are present, add them to the TestTracker.
-										junit.getFailures().forEach(failure -> {
-											String message = failure.getMessage() == null ? "" : " " + failure.getMessage();
-											TestTracker.testFailed("'" + test + "': " + message);
-											Skript.exception(failure.getException(), "JUnit test '" + failure.getTestHeader() + " failed.");
-										});
-										SkriptJUnitTest.clearJUnitTest();
+									errorCounter.start();
+									File testDir = TestMode.TEST_DIR.toFile();
+									assert testDir != null;
+									ScriptLoader.loadScripts(testDir, errorCounter);
+								} finally {
+									errorCounter.stop();
+								}
+	
+								Bukkit.getPluginManager().callEvent(new SkriptTestEvent());
+								if (errorCounter.getCount() > 0) {
+									TestTracker.testStarted("parse scripts");
+									TestTracker.testFailed(errorCounter.getCount() + " error(s) found");
+								}
+								if (errored) { // Check for exceptions thrown while script was executing
+									TestTracker.testStarted("run scripts");
+									TestTracker.testFailed("exception was thrown during execution");
+								}
+								if (TestMode.JUNIT) {
+									SkriptLogger.setVerbosity(Verbosity.DEBUG);
+									info("Running all JUnit tests...");
+									long milliseconds = 0, tests = 0, fails = 0, ignored = 0, size = 0;
+									try {
+										List<Class<?>> classes = Lists.newArrayList(Utils.getClasses(Skript.getInstance(), "org.skriptlang.skript.test", "tests"));
+										// Test that requires package access. This is only present when compiling with src/test.
+										classes.add(Class.forName("ch.njol.skript.variables.FlatFileStorageTest"));
+										size = classes.size();
+										for (Class<?> clazz : classes) {
+											// Reset class SkriptJUnitTest which stores test requirements.
+											String test = clazz.getName();
+											SkriptJUnitTest.setCurrentJUnitTest(test);
+											SkriptJUnitTest.setShutdownDelay(0);
+	
+											info("Running JUnit test '" + test + "'");
+											Result junit = JUnitCore.runClasses(clazz);
+											TestTracker.testStarted("JUnit: '" + test + "'");
+	
+											// Collect all data from the current JUnit test.
+											shutdownDelay = Math.max(shutdownDelay, SkriptJUnitTest.getShutdownDelay());
+											tests += junit.getRunCount();
+											milliseconds += junit.getRunTime();
+											ignored += junit.getIgnoreCount();
+											fails += junit.getFailureCount();
+	
+											// If JUnit failures are present, add them to the TestTracker.
+											junit.getFailures().forEach(failure -> {
+												String message = failure.getMessage() == null ? "" : " " + failure.getMessage();
+												TestTracker.testFailed("'" + test + "': " + message);
+												Skript.exception(failure.getException(), "JUnit test '" + failure.getTestHeader() + " failed.");
+											});
+											SkriptJUnitTest.clearJUnitTest();
+										}
+									} catch (IOException e) {
+										Skript.exception(e, "Failed to execute JUnit runtime tests.");
+									} catch (ClassNotFoundException e) {
+										// Should be the Skript test jar gradle task.
+										assert false : "Class 'ch.njol.skript.variables.FlatFileStorageTest' was not found.";
 									}
-								} catch (IOException e) {
-									Skript.exception(e, "Failed to execute JUnit runtime tests.");
-								} catch (ClassNotFoundException e) {
-									// Should be the Skript test jar gradle task.
-									assert false : "Class 'ch.njol.skript.variables.FlatFileStorageTest' was not found.";
+									if (ignored > 0)
+										Skript.warning("There were " + ignored + " ignored test cases! This can mean they are not properly setup in order in that class!");
+									
+									info("Completed " + tests + " JUnit tests in " + size + " classes with " + fails + " failures in " + milliseconds + " milliseconds.");
 								}
-								if (ignored > 0)
-									Skript.warning("There were " + ignored + " ignored test cases! This can mean they are not properly setup in order in that class!");
-								
-								info("Completed " + tests + " JUnit tests in " + size + " classes with " + fails + " failures in " + milliseconds + " milliseconds.");
 							}
+							double display = shutdownDelay / 20;
+							info("Testing done, shutting down the server in " + display + " second" + (display <= 1D ? "" : "s") + "...");
+							// Delay server shutdown to stop the server from crashing because the current tick takes a long time due to all the tests
+							new Task(Skript.getInstance(), shutdownDelay) {
+								@Override
+								public void run() {
+									if (TestMode.JUNIT && !EffObjectives.isJUnitComplete())
+										TestTracker.testFailed(EffObjectives.getFailedObjectivesString());
+		
+									info("Collecting results to " + TestMode.RESULTS_FILE);
+									String results = new Gson().toJson(TestTracker.collectResults());
+									try {
+										Files.write(TestMode.RESULTS_FILE, results.getBytes(StandardCharsets.UTF_8));
+									} catch (IOException e) {
+										Skript.exception(e, "Failed to write test results.");
+									}
+		
+									Bukkit.getServer().shutdown();
+								}
+							};
 						}
-						double display = shutdownDelay / 20;
-						info("Testing done, shutting down the server in " + display + " second" + (display <= 1D ? "" : "s") + "...");
-						// Delay server shutdown to stop the server from crashing because the current tick takes a long time due to all the tests
-						Bukkit.getScheduler().runTaskLater(Skript.this, () -> {
-							if (TestMode.JUNIT && !EffObjectives.isJUnitComplete())
-								TestTracker.testFailed(EffObjectives.getFailedObjectivesString());
-
-							info("Collecting results to " + TestMode.RESULTS_FILE);
-							String results = new Gson().toJson(TestTracker.collectResults());
-							try {
-								Files.write(TestMode.RESULTS_FILE, results.getBytes(StandardCharsets.UTF_8));
-							} catch (IOException e) {
-								Skript.exception(e, "Failed to write test results.");
-							}
-
-							Bukkit.getServer().shutdown();
-						}, shutdownDelay);
-					}, 100);
+					};
 				}
 
 				// Enable metrics and register custom charts
@@ -840,13 +851,19 @@ protected void afterErrors() {
 										|| !record.getMessage().toLowerCase(Locale.ENGLISH).startsWith("can't keep up!");
 								};
 								BukkitLoggerFilter.addFilter(filter);
-								Bukkit.getScheduler().scheduleSyncDelayedTask(
-									Skript.this,
-									() -> BukkitLoggerFilter.removeFilter(filter),
-									1);
+								new Task(Skript.this, 1) {
+									@Override
+									public void run() {
+										BukkitLoggerFilter.removeFilter(filter);
+									}
+								};
 							} else {
-								Bukkit.getScheduler().scheduleSyncDelayedTask(Skript.this,
-									EvtSkript::onSkriptStart);
+								new Task(Skript.this, 1) {
+									@Override
+									public void run() {
+										EvtSkript.onSkriptStart();
+									}
+								};
 							}
 						} catch (Exception e) {
 							// Something went wrong, we need to make sure the exception is printed
@@ -855,7 +872,7 @@ protected void afterErrors() {
 					});
 				
 			}
-		});
+		};
 		
 		Bukkit.getPluginManager().registerEvents(new Listener() {
 			@EventHandler
diff --git a/src/main/java/ch/njol/skript/SkriptCommand.java b/src/main/java/ch/njol/skript/SkriptCommand.java
index 7f01e3ff331..b90a344a212 100644
--- a/src/main/java/ch/njol/skript/SkriptCommand.java
+++ b/src/main/java/ch/njol/skript/SkriptCommand.java
@@ -25,6 +25,7 @@
 import ch.njol.skript.localization.ArgsMessage;
 import ch.njol.skript.localization.Language;
 import ch.njol.skript.localization.PluralizingArgsMessage;
+import ch.njol.skript.log.BukkitLoggerFilter;
 import ch.njol.skript.log.RedirectingLogHandler;
 import ch.njol.skript.log.TimingLogHandler;
 import ch.njol.skript.test.runner.SkriptTestEvent;
@@ -33,6 +34,7 @@
 import ch.njol.skript.util.ExceptionUtils;
 import ch.njol.skript.util.FileUtils;
 import ch.njol.skript.util.SkriptColor;
+import ch.njol.skript.util.Task;
 import ch.njol.util.OpenCloseable;
 import ch.njol.util.StringUtils;
 import org.bukkit.Bukkit;
@@ -433,16 +435,19 @@ else if (args[0].equalsIgnoreCase("test") && TestMode.DEV_MODE) {
 				ScriptLoader.loadScripts(scriptFile, logHandler)
 					.thenAccept(scriptInfo ->
 						// Code should run on server thread
-						Bukkit.getScheduler().scheduleSyncDelayedTask(Skript.getInstance(), () -> {
-							Bukkit.getPluginManager().callEvent(new SkriptTestEvent()); // Run it
-							ScriptLoader.unloadScripts(ScriptLoader.getLoadedScripts());
-
-							// Get results and show them
-							String[] lines = TestTracker.collectResults().createReport().split("\n");
-							for (String line : lines) {
-								Skript.info(sender, line);
+						new Task(Skript.getInstance(), 1) {
+							@Override
+							public void run() {
+								Bukkit.getPluginManager().callEvent(new SkriptTestEvent()); // Run it
+								ScriptLoader.unloadScripts(ScriptLoader.getLoadedScripts());
+
+								// Get results and show them
+								String[] lines = TestTracker.collectResults().createReport().split("\n");
+								for (String line : lines) {
+									Skript.info(sender, line);
+								}
 							}
-						})
+						}
 					);
 			}
 
diff --git a/src/main/java/ch/njol/skript/bukkitutil/ClickEventTracker.java b/src/main/java/ch/njol/skript/bukkitutil/ClickEventTracker.java
index a0ad94999be..80102aba565 100644
--- a/src/main/java/ch/njol/skript/bukkitutil/ClickEventTracker.java
+++ b/src/main/java/ch/njol/skript/bukkitutil/ClickEventTracker.java
@@ -31,7 +31,9 @@
 import org.bukkit.inventory.EquipmentSlot;
 import org.bukkit.plugin.java.JavaPlugin;
 
+import ch.njol.skript.Skript;
 import ch.njol.skript.effects.EffCancelEvent;
+import ch.njol.skript.util.Task;
 
 /**
  * Tracks click events to remove extraneous events for one player click.
@@ -72,11 +74,13 @@ public TrackedEvent(Cancellable event, EquipmentSlot hand) {
 	public ClickEventTracker(JavaPlugin plugin) {
 		this.firstEvents = new HashMap<>();
 		this.modifiedEvents = new HashSet<>();
-		Bukkit.getScheduler().scheduleSyncRepeatingTask(plugin,
-				() -> {
-					firstEvents.clear();
-					modifiedEvents.clear();
-				}, 1, 1);
+		new Task(Skript.getInstance(), 1, 1) {
+			@Override
+			public void run() {
+				firstEvents.clear();
+				modifiedEvents.clear();
+			}
+		};
 	}
 	
 	/**
diff --git a/src/main/java/ch/njol/skript/command/ScriptCommand.java b/src/main/java/ch/njol/skript/command/ScriptCommand.java
index 93e8cad25b0..d4f23864f27 100644
--- a/src/main/java/ch/njol/skript/command/ScriptCommand.java
+++ b/src/main/java/ch/njol/skript/command/ScriptCommand.java
@@ -70,6 +70,7 @@
 import ch.njol.skript.log.Verbosity;
 import ch.njol.skript.util.Date;
 import ch.njol.skript.util.EmptyStacktraceException;
+import ch.njol.skript.util.Task;
 import ch.njol.skript.util.Timespan;
 import ch.njol.skript.util.Utils;
 import ch.njol.skript.util.chat.BungeeConverter;
@@ -282,7 +283,12 @@ public boolean execute(final CommandSender sender, final String commandLabel, fi
 			runnable.run();
 		} else {
 			// must not wait for the command to complete as some plugins call commands in such a way that the server will deadlock
-			Bukkit.getScheduler().scheduleSyncDelayedTask(Skript.getInstance(), runnable);
+			new Task(Skript.getInstance(), 1) {
+				@Override
+				public void run() {
+					runnable.run();
+				}
+			};
 		}
 
 		return true; // Skript prints its own error message anyway
diff --git a/src/main/java/ch/njol/skript/effects/EffIgnite.java b/src/main/java/ch/njol/skript/effects/EffIgnite.java
index 83624f5d499..805936ab3a8 100644
--- a/src/main/java/ch/njol/skript/effects/EffIgnite.java
+++ b/src/main/java/ch/njol/skript/effects/EffIgnite.java
@@ -33,6 +33,7 @@
 import ch.njol.skript.lang.Effect;
 import ch.njol.skript.lang.Expression;
 import ch.njol.skript.lang.SkriptParser.ParseResult;
+import ch.njol.skript.util.Task;
 import ch.njol.skript.util.Timespan;
 import ch.njol.util.Kleenean;
 
@@ -82,12 +83,12 @@ protected void execute(final Event e) {
 		}
 		for (final Entity en : entities.getArray(e)) {
 			if (e instanceof EntityDamageEvent && ((EntityDamageEvent) e).getEntity() == en && !Delay.isDelayed(e)) {
-				Bukkit.getScheduler().scheduleSyncDelayedTask(Skript.getInstance(), new Runnable() {
+				new Task(Skript.getInstance(), 1) {
 					@Override
 					public void run() {
 						en.setFireTicks(d);
 					}
-				});
+				};
 			} else {
 				if (e instanceof EntityCombustEvent && ((EntityCombustEvent) e).getEntity() == en && !Delay.isDelayed(e))
 					((EntityCombustEvent) e).setCancelled(true);// can't change the duration, thus simply cancel the event (and create a new one)
diff --git a/src/main/java/ch/njol/skript/util/BlockStateBlock.java b/src/main/java/ch/njol/skript/util/BlockStateBlock.java
index e61014acea0..f425aea292c 100644
--- a/src/main/java/ch/njol/skript/util/BlockStateBlock.java
+++ b/src/main/java/ch/njol/skript/util/BlockStateBlock.java
@@ -299,12 +299,12 @@ public PistonMoveReaction getPistonMoveReaction() {
 	@Override
 	public boolean breakNaturally() {
 		if (delayChanges) {
-			Bukkit.getScheduler().scheduleSyncDelayedTask(Skript.getInstance(), new Runnable() {
+			new Task(Skript.getInstance(), 1) {
 				@Override
 				public void run() {
 					state.getBlock().breakNaturally();
 				}
-			});
+			};
 			return true;
 		} else {
 			return false;
@@ -314,12 +314,12 @@ public void run() {
 	@Override
 	public boolean breakNaturally(@Nullable ItemStack tool) {
 		if (delayChanges) {
-			Bukkit.getScheduler().scheduleSyncDelayedTask(Skript.getInstance(), new Runnable() {
+			new Task(Skript.getInstance(), 1) {
 				@Override
 				public void run() {
 					state.getBlock().breakNaturally(tool);
 				}
-			});
+			};
 			return true;
 		} else {
 			return false;
@@ -329,12 +329,12 @@ public void run() {
 	@Override
 	public boolean breakNaturally(boolean triggerEffect) {
 		if (delayChanges) {
-			Bukkit.getScheduler().scheduleSyncDelayedTask(Skript.getInstance(), new Runnable() {
+			new Task(Skript.getInstance(), 1) {
 				@Override
 				public void run() {
 					state.getBlock().breakNaturally(triggerEffect);
 				}
-			});
+			};
 			return true;
 		} else {
 			return false;
@@ -344,12 +344,12 @@ public void run() {
 	@Override
 	public boolean breakNaturally(ItemStack tool, boolean triggerEffect) {
 		if (delayChanges) {
-			Bukkit.getScheduler().scheduleSyncDelayedTask(Skript.getInstance(), new Runnable() {
+			new Task(Skript.getInstance(), 1) {
 				@Override
 				public void run() {
 					state.getBlock().breakNaturally(tool, triggerEffect);
 				}
-			});
+			};
 			return true;
 		} else {
 			return false;
@@ -409,12 +409,12 @@ public Location getLocation(@Nullable Location loc) {
 	@Override
 	public void setType(Material type, boolean applyPhysics) {
 		if (delayChanges) {
-			Bukkit.getScheduler().scheduleSyncDelayedTask(Skript.getInstance(), new Runnable() {
+			new Task(Skript.getInstance(), 1) {
 				@Override
 				public void run() {
 					state.getBlock().setType(type, applyPhysics);
 				}
-			});
+			};
 		} else { // Can't do physics for block state
 			state.setType(type);
 		}
@@ -428,12 +428,12 @@ public BlockData getBlockData() {
 	@Override
 	public void setBlockData(BlockData data) {
 		if (delayChanges) {
-			Bukkit.getScheduler().scheduleSyncDelayedTask(Skript.getInstance(), new Runnable() {
+			new Task(Skript.getInstance(), 1) {
 				@Override
 				public void run() {
 					state.getBlock().setBlockData(data);
 				}
-			});
+			};
 		} else {
 			state.setBlockData(data);
 		}
@@ -442,12 +442,12 @@ public void run() {
 	@Override
 	public void setBlockData(BlockData data, boolean applyPhysics) {
 		if (delayChanges) {
-			Bukkit.getScheduler().scheduleSyncDelayedTask(Skript.getInstance(), new Runnable() {
+			new Task(Skript.getInstance(), 1) {
 				@Override
 				public void run() {
 					state.getBlock().setBlockData(data, applyPhysics);
 				}
-			});
+			};
 		} else { // Cannot apply physics to a block state
 			state.setBlockData(data);
 		}
diff --git a/src/main/java/ch/njol/skript/util/DelayedChangeBlock.java b/src/main/java/ch/njol/skript/util/DelayedChangeBlock.java
index 44b30810018..2d5f33d3ccc 100644
--- a/src/main/java/ch/njol/skript/util/DelayedChangeBlock.java
+++ b/src/main/java/ch/njol/skript/util/DelayedChangeBlock.java
@@ -173,12 +173,12 @@ public void setType(Material type) {
 		if (newState != null) {
 			newState.setType(type);
 		} else {
-			Bukkit.getScheduler().scheduleSyncDelayedTask(Skript.getInstance(), new Runnable() {
+			new Task(Skript.getInstance(), 1) {
 				@Override
 				public void run() {
 					block.setType(type);
 				}
-			});
+			};
 		}
 	}
 
@@ -302,12 +302,12 @@ public boolean breakNaturally() {
 		if (newState != null) {
 			return false;
 		} else {
-			Bukkit.getScheduler().scheduleSyncDelayedTask(Skript.getInstance(), new Runnable() {
+			new Task(Skript.getInstance(), 1) {
 				@Override
 				public void run() {
 					block.breakNaturally();
 				}
-			});
+			};
 			return true;
 		}
 	}
@@ -317,12 +317,12 @@ public boolean breakNaturally(@Nullable ItemStack tool) {
 		if (newState != null) {
 			return false;
 		} else {
-			Bukkit.getScheduler().scheduleSyncDelayedTask(Skript.getInstance(), new Runnable() {
+			new Task(Skript.getInstance(), 1) {
 				@Override
 				public void run() {
 					block.breakNaturally(tool);
 				}
-			});
+			};
 			return true;
 		}
 	}
@@ -332,12 +332,12 @@ public boolean breakNaturally(boolean triggerEffect) {
 		if (newState != null) {
 			return false;
 		} else {
-			Bukkit.getScheduler().scheduleSyncDelayedTask(Skript.getInstance(), new Runnable() {
+			new Task(Skript.getInstance(), 1) {
 				@Override
 				public void run() {
 					block.breakNaturally(triggerEffect);
 				}
-			});
+			};
 			return true;
 		}
 	}
@@ -347,12 +347,12 @@ public boolean breakNaturally(ItemStack tool, boolean triggerEffect) {
 		if (newState != null) {
 			return false;
 		} else {
-			Bukkit.getScheduler().scheduleSyncDelayedTask(Skript.getInstance(), new Runnable() {
+			new Task(Skript.getInstance(), 1) {
 				@Override
 				public void run() {
 					block.breakNaturally(tool, triggerEffect);
 				}
-			});
+			};
 			return true;
 		}
 	}
@@ -406,12 +406,12 @@ public void setType(Material type, boolean applyPhysics) {
 		if (newState != null) {
 			newState.setType(type);
 		} else {
-			Bukkit.getScheduler().scheduleSyncDelayedTask(Skript.getInstance(), new Runnable() {
+			new Task(Skript.getInstance(), 1) {
 				@Override
 				public void run() {
 					block.setType(type, applyPhysics);
 				}
-			});
+			};
 		}
 	}
 
@@ -430,7 +430,12 @@ public void setBlockData(BlockData data, boolean applyPhysics) {
 		if (newState != null) {
 			newState.setBlockData(data);
 		} else {
-			Bukkit.getScheduler().scheduleSyncDelayedTask(Skript.getInstance(), () -> block.setBlockData(data, applyPhysics));
+			new Task(Skript.getInstance(), 1) {
+				@Override
+				public void run() {
+					block.setBlockData(data, applyPhysics);
+				}
+			};
 		}
 	}
 
diff --git a/src/main/java/ch/njol/skript/util/Task.java b/src/main/java/ch/njol/skript/util/Task.java
index f641dfcab5d..0d3370acf55 100644
--- a/src/main/java/ch/njol/skript/util/Task.java
+++ b/src/main/java/ch/njol/skript/util/Task.java
@@ -141,43 +141,4 @@ public void setPeriod(final long period) {
 		}
 	}
 	
-	/**
-	 * Equivalent to <tt>{@link #callSync(Callable, Plugin) callSync}(c, {@link Skript#getInstance()})</tt>
-	 */
-	@Nullable
-	public static <T> T callSync(final Callable<T> c) {
-		return callSync(c, Skript.getInstance());
-	}
-	
-	/**
-	 * Calls a method on Bukkit's main thread.
-	 * <p>
-	 * Hint: Use a Callable&lt;Void&gt; to make a task which blocks your current thread until it is completed.
-	 * 
-	 * @param c The method
-	 * @param p The plugin that owns the task. Must be enabled.
-	 * @return What the method returned or null if it threw an error or was stopped (usually due to the server shutting down)
-	 */
-	@Nullable
-	public static <T> T callSync(final Callable<T> c, final Plugin p) {
-		if (Bukkit.isPrimaryThread()) {
-			try {
-				return c.call();
-			} catch (final Exception e) {
-				Skript.exception(e);
-			}
-		}
-		final Future<T> f = Bukkit.getScheduler().callSyncMethod(p, c);
-		try {
-			while (true) {
-				try {
-					return f.get();
-				} catch (final InterruptedException e) {}
-			}
-		} catch (final ExecutionException e) {
-			Skript.exception(e);
-		} catch (final CancellationException e) {} catch (final ThreadDeath e) {}// server shutting down
-		return null;
-	}
-	
 }
diff --git a/src/main/java/ch/njol/skript/variables/SQLStorage.java b/src/main/java/ch/njol/skript/variables/SQLStorage.java
index 0a53aa3f2b0..c00b3d3bb12 100644
--- a/src/main/java/ch/njol/skript/variables/SQLStorage.java
+++ b/src/main/java/ch/njol/skript/variables/SQLStorage.java
@@ -568,49 +568,55 @@ private void loadVariables(final ResultSet r) throws SQLException {
 //		assert !Thread.holdsLock(db);
 //		synchronized (syncDeserializing) {
 
-		final SQLException e = Task.callSync(new Callable<SQLException>() {
-			@Override
-			@Nullable
-			public SQLException call() throws Exception {
-				try {
-					while (r.next()) {
-						int i = 1;
-						final String name = r.getString(i++);
-						if (name == null) {
-							Skript.error("Variable with NULL name found in the database '" + databaseName + "', ignoring it");
-							continue;
-						}
-						final String type = r.getString(i++);
-						final byte[] value = r.getBytes(i++); // Blob not supported by SQLite
-						lastRowID = r.getLong(i++);
-						if (value == null) {
-							Variables.variableLoaded(name, null, SQLStorage.this);
-						} else {
-							final ClassInfo<?> c = Classes.getClassInfoNoError(type);
-							@SuppressWarnings("unused")
-							Serializer<?> s;
-							if (c == null || (s = c.getSerializer()) == null) {
-								Skript.error("Cannot load the variable {" + name + "} from the database '" + databaseName + "', because the type '" + type + "' cannot be recognised or cannot be stored in variables");
+		SQLException e = null;
+		try {
+			e = new Callable<SQLException>() {
+				@Override
+				@Nullable
+				public SQLException call() throws Exception {
+					try {
+						while (r.next()) {
+							int i = 1;
+							final String name = r.getString(i++);
+							if (name == null) {
+								Skript.error("Variable with NULL name found in the database '" + databaseName + "', ignoring it");
 								continue;
 							}
+							final String type = r.getString(i++);
+							final byte[] value = r.getBytes(i++); // Blob not supported by SQLite
+							lastRowID = r.getLong(i++);
+							if (value == null) {
+								Variables.variableLoaded(name, null, SQLStorage.this);
+							} else {
+								final ClassInfo<?> c = Classes.getClassInfoNoError(type);
+								@SuppressWarnings("unused")
+								Serializer<?> s;
+								if (c == null || (s = c.getSerializer()) == null) {
+									Skript.error("Cannot load the variable {" + name + "} from the database '" + databaseName + "', because the type '" + type + "' cannot be recognised or cannot be stored in variables");
+									continue;
+								}
 //					if (s.mustSyncDeserialization()) {
 //						syncDeserializing.add(new VariableInfo(name, value, c));
 //					} else {
-							final Object d = Classes.deserialize(c, value);
-							if (d == null) {
-								Skript.error("Cannot load the variable {" + name + "} from the database '" + databaseName + "', because it cannot be loaded as " + c.getName().withIndefiniteArticle());
-								continue;
-							}
-							Variables.variableLoaded(name, d, SQLStorage.this);
+								final Object d = Classes.deserialize(c, value);
+								if (d == null) {
+									Skript.error("Cannot load the variable {" + name + "} from the database '" + databaseName + "', because it cannot be loaded as " + c.getName().withIndefiniteArticle());
+									continue;
+								}
+								Variables.variableLoaded(name, d, SQLStorage.this);
 //					}
+							}
 						}
+					} catch (final SQLException e) {
+						return e;
 					}
-				} catch (final SQLException e) {
-					return e;
+					return null;
 				}
-				return null;
-			}
-		});
+			}.call();
+		} catch (Exception error) {
+			// TODO Auto-generated catch block
+			error.printStackTrace();
+		}
 		if (e != null)
 			throw e;
 
@@ -703,49 +709,55 @@ protected void allLoaded() {
 			}
 		};
 
-		final SQLException e = Task.callSync(new Callable<SQLException>() {
-			@SuppressWarnings("null")
-			@Override
-			@Nullable
-			public SQLException call() throws Exception {
-				try {
-					while (r.next()) {
-						int i = 1;
-						final String name = r.getString(i++);
-						if (name == null) {
-							Skript.error("Variable with NULL name found in the database, ignoring it");
-							continue;
-						}
-						final String type = r.getString(i++);
-						final String value = r.getString(i++);
-						lastRowID = r.getLong(i++);
-						if (type == null || value == null) {
-							Variables.variableLoaded(name, null, hadNewTable ? temp : SQLStorage.this);
-						} else {
-							final ClassInfo<?> c = Classes.getClassInfoNoError(type);
-							Serializer<?> s;
-							if (c == null || (s = c.getSerializer()) == null) {
-								Skript.error("Cannot load the variable {" + name + "} from the database, because the type '" + type + "' cannot be recognised or not stored in variables");
+		SQLException e = null;
+		try {
+			e = new Callable<SQLException>() {
+				@SuppressWarnings("null")
+				@Override
+				@Nullable
+				public SQLException call() throws Exception {
+					try {
+						while (r.next()) {
+							int i = 1;
+							final String name = r.getString(i++);
+							if (name == null) {
+								Skript.error("Variable with NULL name found in the database, ignoring it");
 								continue;
 							}
+							final String type = r.getString(i++);
+							final String value = r.getString(i++);
+							lastRowID = r.getLong(i++);
+							if (type == null || value == null) {
+								Variables.variableLoaded(name, null, hadNewTable ? temp : SQLStorage.this);
+							} else {
+								final ClassInfo<?> c = Classes.getClassInfoNoError(type);
+								Serializer<?> s;
+								if (c == null || (s = c.getSerializer()) == null) {
+									Skript.error("Cannot load the variable {" + name + "} from the database, because the type '" + type + "' cannot be recognised or not stored in variables");
+									continue;
+								}
 //					if (s.mustSyncDeserialization()) {
 //						oldSyncDeserializing.add(new OldVariableInfo(name, value, c));
 //					} else {
-							final Object d = s.deserialize(value);
-							if (d == null) {
-								Skript.error("Cannot load the variable {" + name + "} from the database, because '" + value + "' cannot be parsed as a " + type);
-								continue;
-							}
-							Variables.variableLoaded(name, d, SQLStorage.this);
+								final Object d = s.deserialize(value);
+								if (d == null) {
+									Skript.error("Cannot load the variable {" + name + "} from the database, because '" + value + "' cannot be parsed as a " + type);
+									continue;
+								}
+								Variables.variableLoaded(name, d, SQLStorage.this);
 //					}
+							}
 						}
+					} catch (final SQLException e) {
+						return e;
 					}
-				} catch (final SQLException e) {
-					return e;
+					return null;
 				}
-				return null;
-			}
-		});
+			}.call();
+		} catch (Exception error) {
+			// TODO Auto-generated catch block
+			error.printStackTrace();
+		}
 		if (e != null)
 			throw e;
 
